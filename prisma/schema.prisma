// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid())
  email       String     @unique
  username    String     @unique
  password    String
  firstName   String?
  lastName    String?
  fullName    String?
  avatar      String?
  phone       String?
  dateOfBirth DateTime?
  gender      Gender?
  bio         String?
  location    String?
  website     String?
  role        UserRole   @default(USER)
  status      UserStatus @default(OFFLINE)
  isVerified  Boolean    @default(false)
  hash        String?
  hashExpires DateTime?
  isActive    Boolean    @default(true)
  lastSeen    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  sentMessages     Message[]     @relation("SentMessages")
  chatMembers      ChatMember[]
  aiChats         AIChat[]

  @@map("users")
}

model Chat {
  id        String   @id @default(cuid())
  name      String?
  type      ChatType @default(DIRECT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members    ChatMember[]
  messages   Message[]

  @@map("chats")
}

model ChatMember {
  id     String     @id @default(cuid())
  userId String
  chatId String
  role   MemberRole @default(MEMBER)
  joinedAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
  @@map("chat_members")
}

model Message {
  id        String      @id @default(cuid())
  content   String
  type      MessageType @default(TEXT)
  senderId  String
  chatId    String
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())

  // Relations
  sender User   @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  chat   Chat  @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model AIChat {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages AIMessage[]

  @@map("ai_chats")
}

model AIMessage {
  id        String   @id @default(cuid())
  content   String
  role      AIRole
  aiChatId  String
  createdAt DateTime @default(now())

  // Relations
  aiChat AIChat @relation(fields: [aiChatId], references: [id], onDelete: Cascade)

  @@map("ai_messages")
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ChatType {
  DIRECT
  GROUP
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  AUDIO
  VIDEO
}

enum AIRole {
  USER
  ASSISTANT
}
