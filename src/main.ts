import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { ApiResponseInterceptor } from './common/interceptors/api-response.interceptor';
import { ConfigService } from '@nestjs/config';
import helmet from 'helmet';
import compression from 'compression';

async function bootstrap() {
  try {
    const app = await NestFactory.create(AppModule);
    const configService = app.get(ConfigService);

    // Global prefix
    const prefix = configService.get('app.prefix');
    if (prefix) {
      app.setGlobalPrefix(prefix);
    }

    // Security middleware
    const helmetEnabled = configService.get('app.security.helmet.enabled');
    if (helmetEnabled !== false) {
      app.use(helmet());
    }

    // Compression
    app.use(compression());

    // Global validation pipe
    app.useGlobalPipes(new ValidationPipe({
      whitelist: true,
      forbidNonWhitelisted: true,
      transform: true,
      disableErrorMessages: configService.get('app.environment') === 'production',
    }));

    // Global API response interceptor
    app.useGlobalInterceptors(new ApiResponseInterceptor());

    // CORS configuration
    const allowedOrigins = configService.get('app.allowedOrigins') || [];
    const corsEnabled = configService.get('app.security.cors.enabled');

    if (corsEnabled !== false) {
      app.enableCors({
        origin: (origin, callback) => {
          // Allow requests with no origin (like mobile apps or curl requests)
          if (!origin) return callback(null, true);

          if (allowedOrigins.includes(origin)) {
            return callback(null, true);
          } else {
            return callback(new Error('Not allowed by CORS'));
          }
        },
        credentials: true,
        methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
        allowedHeaders: ['Content-Type', 'Authorization', 'Accept'],
      });
    }

    // Swagger configuration
    const config = new DocumentBuilder()
      .setTitle('SmartChat API')
      .setDescription(`
        ## üéØ SmartChat - ·ª®ng d·ª•ng nh·∫Øn tin th·ªùi gian th·ª±c + AI tr·ª£ l√Ω

        ### T√≠nh nƒÉng ch√≠nh:
        - **Authentication**: ƒêƒÉng k√Ω/ƒêƒÉng nh·∫≠p v·ªõi JWT Token
        - **Real-time Chat**: Chat 1-1 v√† nh√≥m v·ªõi WebSocket
        - **AI ChatBot**: T√≠ch h·ª£p AI assistant
        - **User Management**: Qu·∫£n l√Ω ng∆∞·ªùi d√πng v√† tr·∫°ng th√°i
        - **Message History**: L∆∞u tr·ªØ v√† truy xu·∫•t tin nh·∫Øn
        - **Rate Limiting**: B·∫£o v·ªá API kh·ªèi DDOS
        - **Caching**: T·ªëi ∆∞u performance v·ªõi Redis

        ### WebSocket Events:
        - \`join\`: User tham gia h·ªá th·ªëng
        - \`joinChat\`: Tham gia chat room
        - \`sendMessage\`: G·ª≠i tin nh·∫Øn real-time
        - \`typing\`: Typing indicator
        - \`markAsRead\`: ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc

        ### Authentication:
        T·∫•t c·∫£ API endpoints (tr·ª´ auth) y√™u c·∫ßu JWT token trong header:
        \`\`\`
        Authorization: Bearer <your-jwt-token>
        \`\`\`

        ### Rate Limiting:
        API ƒë∆∞·ª£c b·∫£o v·ªá b·ªüi rate limiting ƒë·ªÉ ch·ªëng DDOS:
        - Gi·ªõi h·∫°n: ${configService.get('app.rateLimit.max')} requests per ${configService.get('app.rateLimit.windowMs') / 1000 / 60} minutes
        - Headers: X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Reset
      `)
      .setVersion('1.0')
      .addTag('Authentication', 'ƒêƒÉng k√Ω, ƒëƒÉng nh·∫≠p v√† qu·∫£n l√Ω token')
      .addTag('Users', 'Qu·∫£n l√Ω th√¥ng tin ng∆∞·ªùi d√πng')
      .addTag('Chats', 'Qu·∫£n l√Ω chat v√† tin nh·∫Øn')
      .addTag('AI Chat', 'T∆∞∆°ng t√°c v·ªõi AI assistant')
      .addTag('WebSocket', 'Real-time communication events')
      .addBearerAuth(
        {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
          name: 'JWT',
          description: 'Enter JWT token',
          in: 'header',
        },
        'JWT-auth',
      )
      .addServer('http://localhost:51213', 'Development server')
      .addServer('https://api.smartchat.com', 'Production server')
      .build();

    const document = SwaggerModule.createDocument(app, config);
    SwaggerModule.setup('api', app, document, {
      swaggerOptions: {
        persistAuthorization: true,
        filter: true,
        showRequestDuration: true,
        syntaxHighlight: {
          activate: true,
          theme: 'monokai',
        },
      },
      customSiteTitle: 'SmartChat API Documentation',
      customCss: `
        .swagger-ui .topbar { display: none }
        .swagger-ui .info .title { color: #2c3e50; font-size: 2.5em; }
        .swagger-ui .info .description { font-size: 1.1em; line-height: 1.6; }
        .swagger-ui .scheme-container { background: #f8f9fa; padding: 10px; border-radius: 5px; }
      `,
    });

    const port = configService.get('app.port') || 51213;
    const host = configService.get('app.host') || '0.0.0.0';

    await app.listen(port, host);

    console.log('\n' + '='.repeat(70));
    console.log('üåü SMARTCHAT API SERVER üåü');
    console.log('='.repeat(70));
    console.log(`üì° Server Status    : ONLINE & READY`);
    console.log(`üîó API Endpoint     : http://${host}:${port}`);
    console.log(`üìñ Documentation   : http://${host}:${port}/api`);
    console.log(`‚ö° Environment     : ${configService.get('app.environment') || 'development'}`);
    console.log(`üîí Rate Limiting   : ${configService.get('app.rateLimit.max')} req/${configService.get('app.rateLimit.windowMs') / 1000 / 60}min`);
    console.log(`üíæ Redis Cache     : ${configService.get('app.redis.host')}:${configService.get('app.redis.port')}`);
    console.log(`üïí Started at      : ${new Date().toLocaleString()}`);
    console.log('='.repeat(70));
    console.log('‚ú® Ready to serve intelligent conversations ‚ú®\n');
  } catch (error) {
    console.error('Failed to start application:', error);
    throw error;
  }
}
bootstrap();
